#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pg.LetsMeet.Dataverse.Context
{
	
	
	[System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.microsoft.com/xrm/2011/new/")]
	[Microsoft.Xrm.Sdk.Client.RequestProxyAttribute("msdyn_CreateEntity")]
	public partial class msdyn_CreateEntityRequest : Microsoft.Xrm.Sdk.OrganizationRequest
	{
		
		public static class Fields
		{
			public const string PreviewData = "PreviewData";
			public const string ConnectionInfo = "ConnectionInfo";
			public const string IsToExistingTable = "IsToExistingTable";
			public const string SampleData = "SampleData";
			public const string UseUserSettings = "UseUserSettings";
			public const string EntityDefinition = "EntityDefinition";
			public const string FileInfo = "FileInfo";
		}
		
		public const string ActionLogicalName = "msdyn_CreateEntity";
		
		public string PreviewData
		{
			get
			{
				if (this.Parameters.Contains("PreviewData"))
				{
					return ((string)(this.Parameters["PreviewData"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Parameters["PreviewData"] = value;
			}
		}
		
		public string ConnectionInfo
		{
			get
			{
				if (this.Parameters.Contains("ConnectionInfo"))
				{
					return ((string)(this.Parameters["ConnectionInfo"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Parameters["ConnectionInfo"] = value;
			}
		}
		
		public bool IsToExistingTable
		{
			get
			{
				if (this.Parameters.Contains("IsToExistingTable"))
				{
					return ((bool)(this.Parameters["IsToExistingTable"]));
				}
				else
				{
					return default(bool);
				}
			}
			set
			{
				this.Parameters["IsToExistingTable"] = value;
			}
		}
		
		public string SampleData
		{
			get
			{
				if (this.Parameters.Contains("SampleData"))
				{
					return ((string)(this.Parameters["SampleData"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Parameters["SampleData"] = value;
			}
		}
		
		public bool UseUserSettings
		{
			get
			{
				if (this.Parameters.Contains("UseUserSettings"))
				{
					return ((bool)(this.Parameters["UseUserSettings"]));
				}
				else
				{
					return default(bool);
				}
			}
			set
			{
				this.Parameters["UseUserSettings"] = value;
			}
		}
		
		public string EntityDefinition
		{
			get
			{
				if (this.Parameters.Contains("EntityDefinition"))
				{
					return ((string)(this.Parameters["EntityDefinition"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Parameters["EntityDefinition"] = value;
			}
		}
		
		public string FileInfo
		{
			get
			{
				if (this.Parameters.Contains("FileInfo"))
				{
					return ((string)(this.Parameters["FileInfo"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Parameters["FileInfo"] = value;
			}
		}
		
		public msdyn_CreateEntityRequest()
		{
			this.RequestName = "msdyn_CreateEntity";
			this.EntityDefinition = default(string);
		}
	}
	
	[System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.microsoft.com/xrm/2011/new/")]
	[Microsoft.Xrm.Sdk.Client.ResponseProxyAttribute("msdyn_CreateEntity")]
	public partial class msdyn_CreateEntityResponse : Microsoft.Xrm.Sdk.OrganizationResponse
	{
		
		public static class Fields
		{
			public const string EntityId = "EntityId";
			public const string SampleDataIngestionErrors = "SampleDataIngestionErrors";
		}
		
		public const string ActionLogicalName = "msdyn_CreateEntity";
		
		public msdyn_CreateEntityResponse()
		{
		}
		
		public System.Guid EntityId
		{
			get
			{
				if (this.Results.Contains("EntityId"))
				{
					return ((System.Guid)(this.Results["EntityId"]));
				}
				else
				{
					return default(System.Guid);
				}
			}
			set
			{
				this.Results["EntityId"] = value;
			}
		}
		
		public string SampleDataIngestionErrors
		{
			get
			{
				if (this.Results.Contains("SampleDataIngestionErrors"))
				{
					return ((string)(this.Results["SampleDataIngestionErrors"]));
				}
				else
				{
					return default(string);
				}
			}
			set
			{
				this.Results["SampleDataIngestionErrors"] = value;
			}
		}
	}
}
#pragma warning restore CS1591
